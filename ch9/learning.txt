09/04/20

Terminal logins :-
It can be used to log in to a system using terminal of any type.
Be it character based , character based graphical or GU windowing system.

getty is a process that sets up the terminal.

Event flow of login:
pid 1(init)--fork-->init--exec-->getty--exec--> login

When the system is booted , kernel creates pid 1, i.e init process and 
init brings system to multiuser mode.The init process reads the file /etc/ttys and, for every terminal device that allows a login, does a fork followed by an exec of the program getty. 
getty calls open for the terminal device. The terminal is opened for reading and writing. Once the device is open, file descriptors 0, 1, and 2 are set to the device.
getty outputs something like login: and waits for us to enter our user name.
Invokes the login program: execle("/bin/login", "login", "-p", username, (char *)0, envp);

Now the login program will 1)change our home dir 
2)change ownership
3)change access permission
4)initialize environment


10/04/20

Process Groups :-
Each process have a process ID and belongs to a process group.
A process group is a collection of 1 or more process performing same job from same terminal.
There exists unique process group ID for every group.

Process group lifetime- Process group ID exists till the last process exists in that group.
A process can join an existing process group or creates a new process group by calling setpgid.

Session :-A session is a collection of one or more process groups.

11/04/20

Controlling Terminal
The session leader that establishes the connection to the controlling terminal is called the controlling process.
The process groups within a session can be divided into a single foreground process group and one or more background process groups.

tcgetpgrp, tcsetpgrp, and tcgetsid Functions:-
We need a way to tell the kernel which process group is the foreground process group, so that the terminal device driver knows where to send the terminal input and the terminal-generated signals.
The function tcgetpgrp returns the process group ID of the foreground process group associated with the terminal open on fd.
The tcgetsid function allows an application to obtain the process group ID for the session leader given a file descriptor for the controlling TTY.

13/04/20

Job Control:-
Job control let us start multiple groups of processes from the terminal so that we can control which task is to be run in
foreground and which task is in background. Some of the built in Job control Builtins are 
bg-  Place job to background
gf- place job to foreground
jobs- lists active jobs
suspend suspends execution of shell

14/04/20
Orphaned Process:-
A process whose parent terminates is called an orphan and is inherited by the init process. The entire process groups that can be orphaned.
The following events occurs:
The shell places the foreground process into its own process group
After fork, the parent sleeps for 5 seconds.
The child establishes a signal handler for the hang-up signal (SIGHUP)
The child sends itself the stop signal (SIGTSTP) with the kill function.
When the parent terminates, the child is orphaned, so the childâ€™s parent process ID becomes 1, which is the init process ID.
Now the child becomes member of orphaned process group.

FreeBSD implementation:-
The figure shown in book explains the implementation of session and process group
It depicts various structures that are related to this such as
tty structure- It is contained in the kernel for each terminal device and each pseudo terminal device
session structure - It is allocated for each session
prgp structure- It contains information about process groups such as their IDs, session, member 
vnode structure - It is allocated when the controlling terminal device is opened. All references to /dev/tty in a process go through this vnode structure.




 




