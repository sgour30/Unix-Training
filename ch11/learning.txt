08/05/20
Thread Concepts:
With multiple threads we can do multiple things with same program. Threads can work synchronously. Program throughput and response time can be improved by using threads. Multithreading is not limited to multicore processor but also an unicore processor. 
A thread consists of information while executing within a process. Thread ID that identifies the thread within a process, a
set of register values, a stack, a scheduling priority and policy, a signal mask, an errno
variable, and thread-specific data. Everything within a process is sharable among the threads in a process, including the text of the executable.

Thread Identification:
A thread ID is represented by the pthread_t data type.
A thread can obtain its own thread ID by calling the pthread_self function.

09/05/20
Thread creation:
Threads can be created by calling the pthread_create function.
When a thread is created, there is no guarantee whether the newly created thread or the calling thread.

Thread termination:
A single thread can exit in 3 ways, without terminating the entire process:
It can simply return from the start routine. The return value is the thread’s exit code.
It thread can be canceled by another thread in the same process.
It thread can call pthread_exit.

Thread Synchronization:
It is coordinating activities and data access among multiple threads.

Mutexes:
A mutex is basically a lock that we set (lock) before accessing a shared resource and release (unlock) when we’re done.
A mutex variable is represented by the pthread_mutex_t data type.

Deadlock Avoidance:
They can be avoided by carefully controlling the order in which mutexes are locked.

Reader–Writer Locks:
In these, a mutex is either locked or unlocked, and only one thread can lock it at a time. A reader–writer lock 
(also called shared–exclusive lock) has three possible states:
Locked in read mode/shared mode
Locked in write mode/exclusive mode
Unlocked Only one thread at a time can hold a reader–writer lock in write mode, but multiple threads can hold a reader–writer 
lock in read mode at the same time.

Reader-Writer Locks with timeouts:
Similar to mutexes, Read-Write locks are privided with a timeout functionality so that to give applications may not stuck indeﬁnitely while trying to acquireareader–writer lock. 
There are basically two functions pthread_rwlock_timedrdlock and pthread_rwlock_timedwrlock.

11/05/2020
Condition Variable:
A condition variable is an user defined queue that threads can put themselves on when some state of execution is not as expected by
some other thread, when it changes said state, can then wake one of those waiting threads and thus allow them to continue.

Spin Locks:
It operates by disabling scheduler and possibly interrupts on that particular resource that the lock is acquired on.
A spin lock could be used in situations where locks are held for short periods of times and
threads don’t want to get descheduled.

Barriers:
It is a synchronization mechanism that can be used to coordinate multiple threads working in parallel. It can help execute any number of threads. A barrier allows each thread to wait until all cooperatingthreads have reached the same point, and then continue executing from there.
