16/05/20
Introduction to Advance I/O
This chapter covers:
Nonblocking I/O
Record locking
I/O multiplexing (the select and poll functions)
Asynchronous I/O
The readv and writev functions
Memory-mapped I/O (mmap)

Nonblocking I/O:
System calls are divided into two categories: the "slow" ones and all the others. The slow system calls are those that can block forever. They include:
Reads that can block the caller forever if data isn’t present with certain file types (pipes, terminal devices, and network devices)
Writes that can block the caller forever if the data can’t be accepted immediately by these same file types (e.g., no room in the pipe, network flow control)
Opens that block until some condition occurs on certain file types (such as an open of a terminal device that waits until an attached modem answers the phone, or an open of a FIFO for writing only, when no other process has the FIFO open for reading)
Reads and writes of files that have mandatory record locking enabled
Certain ioctl operations

Record Locking:
Record locking is the term normally used to describe the ability of a process to prevent other processes from modifying a region of a file while the first process is reading or modifying that portion of the file. Under the UNIX System, "record" is a misnomer; the UNIX kernel does not have a notion of records in a file. A better term is byte-range locking, given that it is a range of a file (possibly the entire file) that is locked.

I/O Multiplexing:
I/O multiplexing is the capability to tell the kernel that we want to be notified if one or more I/O conditions are ready, like input is ready to be read, or descriptor is capable of taking more output. When client is handling multiple descriptors (like standard input and network socket).

select and pselect Functions:
select function is used in I/O multiplexing.
select() uses a timeout that is a struct timeval (with seconds and microseconds), while pselect() uses a struct timespec (with seconds and nanoseconds).

 




